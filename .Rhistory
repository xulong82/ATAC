sapply(grp2, function(x) means(hspa2[grp2 == x]))
sapply(grp2, function(x) mean(hspa2[grp2 == x]))
sapply(grp1, function(x) mean(hspa2[grp2 == grp1]))
plot(c(1, 6), c(0, sapply(grp1, function(x) mean(hspa2[grp2 == grp1]))), type = "b", xlim = c(-1, 7))
plot(c(1, 6), c(sapply(grp1, function(x) mean(hspa2[grp2 == grp1]))), type = "b", xlim = c(-1, 7))
plot(c(1, 6), sapply(grp1, function(x) mean(hspa2[grp2 == grp1])), type = "b", xlim = c(-1, 7))
plot(1:6, sapply(grp1, function(x) mean(hspa2[grp2 == grp1])), type = "b", xlim = c(-1, 7))
x = glm[, 1]
x
(estimate = summary(fit[["Hspa2"]])$coefficients[, "Estimate"])
estimate[c(1, 2, 4, 5)]
sum(estimate[c(1, 2, 4, 5)])
mean(hspa2[grp2 == "MNONP"])
mean(hspa2[grp2 == "MPLM"])
?stripchart
abline(v = 1)
plot(1:6, sapply(grp1, function(x) mean(hspa2[grp2 == grp1])), type = "p", xlim = c(-1, 7))
sapply(grp1, function(x) mean(hspa2[grp2 == grp1]))
grp1
grp2
hspa2
plot(1:6, sapply(grp1, function(x) mean(hspa2[grp2 == x])), type = "p", xlim = c(-1, 7))
plot(1:6, sapply(grp1, function(x) mean(hspa2[grp2 == x])), type = "b", xlim = c(-1, 7))
plot(1:6, sapply(grp1, function(x) mean(hspa2[grp2 == x])), type = "p", xlim = c(-1, 7))
cols <- brewer.pal(6,"Dark2")
library(RColorBrewer)
cols <- brewer.pal(6,"Dark2")
cols
abline(h=0)
plot(1:6, sapply(grp1, function(x) mean(hspa2[grp2 == x])), type = "p", xlim = c(-1, 7), ylim = c(-1, 8))
abline(h=0)
(coefs = summary(fit[["Hspa2"]])$coefficients[, "Estimate"])
jit = 0.1
arrows(1+jit, 0, 1+jit, coefs[1], lwd=3, col=cols[1])
arrows(1, 0, 1, coefs[1], col=cols[1])
abline(h=coefs[1],col=cols[1])
arrows(2, coefs[1], 2, coefs[1] + coefs[2], lwd=3, col=cols[2])
arrows(3, coefs[1], 3, coefs[1] + coefs[3], lwd=3, col=cols[3])
arrows(4, coefs[1], 4, coefs[1] + coefs[4], lwd=3, col=cols[4])
sapply(grp1, function(x) mean(hspa2[grp2 == x]))
arrows(2, coefs[1], 2, coefs[1] + coefs[4], lwd=3, col=cols[2])
arrows(3, coefs[1], 3, coefs[1] + coefs[3], lwd=3, col=cols[3])
arrows(5, coefs[1], 5, coefs[1] + coefs[4], lwd=3, col=cols[5])
arrows(5, coefs[1], 5, coefs[1] + coefs[2], lwd=3, col=cols[5])
segments(3,coefs[1]+coefs[3],4,coefs[1]+coefs[3],lwd=3,col=cols[3])
segments(3, coefs[1]+coefs[3], 4,coefs[1]+coefs[3], lwd=3, col=cols[3])
arrows(4, coefs[1]+coefs[3], 4, coefs[1]+coefs[3]+coefs[4], lwd=3, col=cols[2])
arrows(4, coefs[1]+coefs[3]+coefs[4], 4, coefs[1]+coefs[3]+coefs[4]+coefs[6], lwd=3, col=cols[6])
arrows(4, coefs[1]+coefs[3]+coefs[4], 4, coefs[1]+coefs[3]+coefs[4]+coefs[6], lwd=3, col=cols[6])
(hspa2 = sapply(grp1, function(x) mean(hspa2[grp2 == x]))
)
(hspa2 = sapply(grp1, function(x) mean(hspa2[grp2 == x])))
(hspa2 = log2(gene["Hspa2", ] + 1))
(hspa2 = sapply(grp1, function(x) mean(hspa2[grp2 == x])))
plot(1:6, hspa2, type = "p", xaxt = "n", xlim = c(-1, 7), ylim = c(-1, 8))
axis(1, at=1:6, labels=names(hspa2))
plot(1:6, hspa2, type = "p", xaxt = "n", xlim = c(-1, 7), ylim = c(-0, 7))
axis(1, at=1:6, labels=names(hspa2))
plot(1:6, hspa2, type = "p", xaxt = "n", xlim = c(1, 6), ylim = c(-1, 8))
axis(1, at=1:6, labels=names(hspa2))
plot(1:6, hspa2, type = "p", xaxt = "n", xlim = c(0, 7), ylim = c(-1, 8))
axis(1, at=1:6, labels=names(hspa2))
plot(1:6, hspa2, type = "p", xaxt = "n", xlim = c(0, 7), ylim = c(-1, 8), xlab = "n")
plot(1:6, hspa2, type = "p", xaxt = "n", xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
axis(1, at=1:6, labels=names(hspa2))
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 18, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 13, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 11, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 10, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 7, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
pch
?pch
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 23, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 17, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 17, size = 3, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 17, cex = 3, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 17, cex = 2, xlim = c(0, 7), ylim = c(-1, 8), xlab = "")
plot(1:6, hspa2, type = "p", xaxt = "n", pch = 17, cex = 2, xlim = c(0, 7), ylim = c(-1, 9), xlab = "")
plot(1:6, hspa2, xaxt = "n", pch = 17, cex = 2, xlim = c(0, 7), ylim = c(-1, 9), xlab = "")
plot(1:6, hspa2, xaxt="n", pch=17, cex=2, xlim=c(0, 7), ylim=c(-1, 9), xlab="")
axis(1, at=1:6, labels=names(hspa2))
cols <- brewer.pal(6,"Dark2")
abline(h=0)
coefs
arrows(1, 0, 1, coefs[1], lwd=3, col=cols[1])
abline(h=coefs[1], col=cols[1])
arrows(2, coefs[1], 2, coefs[1]+coefs[4], lwd=3, col=cols[2])
arrows(3, coefs[1], 3, coefs[1]+coefs[3], lwd=3, col=cols[3])
segments(3, coefs[1]+coefs[3], 4,coefs[1]+coefs[3], lwd=3, col=cols[3])
arrows(4, coefs[1]+coefs[3], 4, coefs[1]+coefs[3]+coefs[4], lwd=3, col=cols[2])
arrows(4, coefs[1]+coefs[3]+coefs[4], 4, coefs[1]+coefs[3]+coefs[4]+coefs[6], lwd=3, col=cols[6])
plot(1:6, hspa2, xaxt="n", pch=17, cex=2, xlim=c(0, 7), ylim=c(-1, 9), xlab="")
axis(1, at=1:6, labels=names(hspa2))
abline(h=0)
arrows(1, 0, 1, coefs[1], lwd=3, col=cols[1])
abline(h=coefs[1], col=cols[1])
arrows(2, coefs[1], 2, coefs[1]+coefs[4], lwd=3, col=cols[4])
arrows(3, coefs[1], 3, coefs[1]+coefs[3], lwd=3, col=cols[3])
segments(3, coefs[1]+coefs[3], 4,coefs[1]+coefs[3], col=cols[3])
arrows(4, coefs[1]+coefs[3], 4, coefs[1]+coefs[3]+coefs[4], lwd=3, col=cols[4])
arrows(4, coefs[1]+coefs[3]+coefs[4], 4, coefs[1]+coefs[3]+coefs[4]+coefs[6], lwd=3, col=cols[6])
legend("right", names(coefs), fill=cols, cex=.75, bg="white")
legend("right", names(coefs), fill=cols, bg="white")
coefs
arrows(5, coefs[1], 5, coefs[1]+coefs[2], lwd=3, col=cols[2]) # WNONP - WIN
segments(5, coefs[1]+coefs[2], 6,coefs[1]+coefs[2], col=cols[2]) #
arrows(6, coefs[1]+coefs[2], 6, coefs[1]+coefs[2]+coefs[4], lwd=3, col=cols[4])
arrows(6, coefs[1]+coefs[2]+coefs[4], 6, coefs[1]+coefs[2]+coefs[4]+coefs[5], lwd=3, col=cols[5])
(hspa8 = log2(gene["Hspa8", ] + 1))
(hspa8 = sapply(grp1, function(x) mean(hspa8[grp2 == x])))
(coefs = summary(fit[["Hspa8"]])$coefficients[, "Estimate"])
cols <- brewer.pal(6,"Dark2")
plot(1:6, hspa8, xaxt="n", pch=17, cex=2, xlim=c(0, 7), ylim=c(-1, 9), xlab="")
plot(1:6, hspa8, xaxt="n", pch=17, cex=2, xlim=c(0, 7), ylim=c(-1, 12), xlab="")
axis(1, at=1:6, labels=names(hspa2))
abline(h=0)
arrows(1, 0, 1, coefs[1], lwd=3, col=cols[1]) # WIN as baseline
abline(h=coefs[1], col=cols[1])
arrows(2, coefs[1], 2, coefs[1]+coefs[4], lwd=3, col=cols[4]) # MIN - WIN
arrows(3, coefs[1], 3, coefs[1]+coefs[3], lwd=3, col=cols[3]) # WNONP - WIN
segments(3, coefs[1]+coefs[3], 4,coefs[1]+coefs[3], col=cols[3]) #
arrows(4, coefs[1]+coefs[3], 4, coefs[1]+coefs[3]+coefs[4], lwd=3, col=cols[4])
arrows(4, coefs[1]+coefs[3]+coefs[4], 4, coefs[1]+coefs[3]+coefs[4]+coefs[6], lwd=3, col=cols[6])
arrows(5, coefs[1], 5, coefs[1]+coefs[2], lwd=3, col=cols[2]) # WNONP - WIN
segments(5, coefs[1]+coefs[2], 6,coefs[1]+coefs[2], col=cols[2]) #
arrows(6, coefs[1]+coefs[2], 6, coefs[1]+coefs[2]+coefs[4], lwd=3, col=cols[4])
arrows(6, coefs[1]+coefs[2]+coefs[4], 6, coefs[1]+coefs[2]+coefs[4]+coefs[5], lwd=3, col=cols[5])
coef
coefs
legend("right", names(coefs), fill=cols, bg="white")
fit.e = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Estimate"]))
fit.p = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Pr(>|t|)"]))
poly = names(fit)[fit.p[, "fracPLM:genoM"] < 0.05]
nonp = names(fit)[fit.p[, "fracNONP:genoM"] < 0.05]
intersect(nonp, names(fit)[fit.e[, "fracNONP:genoM"] > 0])
(mutAll = names(which(rowSums((fit.p < 0.05)[, c("genoM", "fracPLM:genoM", "fracNONP:genoM")]) > 0)))
(nonpAll = unique(c(setdiff(mutAll, poly), nonp)))
(nonpAll2 = names(which(rowSums((fit.p < 0.05)[, c("genoM", "fracNONP:genoM")]) > 0)))
setdiff(nonpAll, nonpAll2)
setdiff(nonpAll2, nonpAll)
fit[["Ercc2"]]
summary(fit[["Ercc2"]])
rm(list = ls())
setwd("~/Dropbox/GitHub/Testis")
load("data/dataList.rdt")
for(obj in names(dataList)) assign(obj, dataList[[obj]])
myhyper <- function(g1, g2) {  # Hypergeometric
if(length(intersect(g1, g2)) == 0) return(1)
1 - phyper(length(intersect(g1, g2)) - 1, length(g2), length(setdiff(geneAll, g2)), length(g1))
} # Pr(count >= length(intersect(g1, g2)))
gene <- tpm[biomart$ensembl_transcript_id, ]
gene <- apply(gene, 2, function(x) tapply(x, biomart$external_gene_name, sum))
dim(gene)
matboxplot(as.data.frame(log2(gene + 1)), groupFactor = gsub("[123]", "", colnames(gene)))
log2(1e4)
abline(h = log2(1e4))
abline(h = log2(1e4), col = "red")
log2(1e6)
gene[! rowMax(gene) > 1e4, ]  # outlier
gene[rowMax(gene) > 1e4, ]  # outlier
gene[rowMax(gene) > 1e4, ] %>% rownames  # outlier
gene <- gene[! rowMax(gene) > 1e4, ]  # outlier
gene <- sweep(gene, 2, colSums(gene), "/") * 1e6
geneAll <- rownames(gene)
gene <- gene[rowMax(gene) > 20, ]
dim(gene)
grp1 <- c("WIN", "MIN", "WNONP", "MNONP", "WPLM", "MPLM")
gene <- gene[, order(factor(gsub("[123]", "", colnames(gene)), levels = grp1))]
grp2 <- factor(gsub("[123]", "", colnames(gene)), levels = grp1)
matboxplot(as.data.frame(log2(gene + 1)), groupFactor = as.numeric(grp2))
geno <- factor(gsub("[123].*", "", colnames(gene)), levels = c("W", "M"))
frac <- factor(gsub(".*[123]", "", colnames(gene)), levels = c("IN", "PLM", "NONP"))
fit <- apply(log2(gene + 1), 1, function (x) lm(x ~ frac + geno + frac * geno))
summary(fit[["Hspa8"]])
(hspa8 = log2(gene["Hspa8", ] + 1))
(hspa8 = sapply(grp1, function(x) mean(hspa8[grp2 == x])))
(coefs = summary(fit[["Hspa8"]])$coefficients[, "Estimate"])
cols <- brewer.pal(6,"Dark2")
plot(1:6, hspa8, xaxt="n", pch=17, cex=2, xlim=c(0, 7), ylim=c(-1, 12), xlab="")
axis(1, at=1:6, labels=names(hspa2))
axis(1, at=1:6, labels=names(hspa8))
abline(h=0)
arrows(1, 0, 1, coefs[1], lwd=3, col=cols[1]) # WIN as baseline
abline(h=coefs[1], col=cols[1])
arrows(2, coefs[1], 2, coefs[1]+coefs[4], lwd=3, col=cols[4]) # MIN - WIN
arrows(3, coefs[1], 3, coefs[1]+coefs[3], lwd=3, col=cols[3]) # WNONP - WIN
segments(3, coefs[1]+coefs[3], 4,coefs[1]+coefs[3], col=cols[3]) #
arrows(4, coefs[1]+coefs[3], 4, coefs[1]+coefs[3]+coefs[4], lwd=3, col=cols[4])
arrows(4, coefs[1]+coefs[3]+coefs[4], 4, coefs[1]+coefs[3]+coefs[4]+coefs[6], lwd=3, col=cols[6])
arrows(5, coefs[1], 5, coefs[1]+coefs[2], lwd=3, col=cols[2]) # WNONP - WIN
segments(5, coefs[1]+coefs[2], 6,coefs[1]+coefs[2], col=cols[2]) #
arrows(6, coefs[1]+coefs[2], 6, coefs[1]+coefs[2]+coefs[4], lwd=3, col=cols[4])
arrows(6, coefs[1]+coefs[2]+coefs[4], 6, coefs[1]+coefs[2]+coefs[4]+coefs[5], lwd=3, col=cols[5])
legend("right", names(coefs), fill=cols, bg="white")
summary(fit[["Hspa2"]])
summary(fit[["Hspa2"]])
fit.e = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Estimate"]))
fit.p = t(sapply(fit, function(x) summary(x)$coefficients[-1, "Pr(>|t|)"]))
(nonp = names(fit)[fit.p[, "fracNONP:genoM"] < 0.05])
library(affy)
library(oligo)
library(ape)
library(amap)
library(xlsx)
library(genefilter)
library(org.Mm.eg.db)
library(TxDb.Mmusculus.UCSC.mm10.knownGene)
library(preprocessCore)
library(quantro)
library(qvalue)
library(dplyr)
library(tidyr)
library(reshape)
rm(list = ls())
load("~/Dropbox/X/summary.rdt")
source("~/Dropbox/X/function.R")
setwd("~/Dropbox/GitHub/Lupus/Crotty")
load("../data/myTpm.rdt")
matboxplot(myTpm, groupFactor = gsub("[12]", "", names(myTpm)))
myTpm[rowMax(as.matrix(myTpm)) > 1e4, ]
myTpm <- myTpm[! rowMax(as.matrix(myTpm)) > 1e4, ]
myTpm <- sweep(myTpm, 2, colSums(myTpm), "/") * 1e6
myTpm <- log2(myTpm + 1)
myTpm <- myTpm[rowMax(as.matrix(myTpm)) > 5, ]
group <- gsub("[12]", "", names(myTpm))
myTpm_mean <- data.frame(NN = rowMeans(myTpm[1:2]), NP = rowMeans(myTpm[3:4]), PP = rowMeans(myTpm[5:6]))
colSums(myTpm_mean)
file <- "GSE67334_TFH.Vs.TH1.DESeq_Analysis_DE_Genes.txt"
three <- read.table(file, header = T, row.names = 1, sep = "\t")
three_expr <- three[grep("Rep", names(three))] # read count
matboxplot(three_expr, groupFactor = gsub("_.*", "", names(three_expr)))
three_mean <- three[grep("^Mean", names(three))]
names(three_mean) <- gsub("Mean.", "", names(three_mean))
txdb <- keepStandardChromosomes(TxDb.Mmusculus.UCSC.mm10.knownGene)
entrez = AnnotationDbi::select(org.Mm.eg.db, rownames(three), columns=c("ENTREZID"), keytype="SYMBOL")
nrow(entrez[is.na(entrez$ENTREZID), ])
entrez.keep = entrez$ENTREZID[! is.na(entrez$ENTREZID)]
tx <- transcriptsBy(txdb, "gene")
tx <- tx[names(tx) %in% entrez.keep]
tx.len <- mean(width(tx)) # caveat
names(tx.len) <- entrez$SYMBOL[match(names(tx.len), entrez$ENTREZID)]
three_mean <- three_mean[names(tx.len), ]
three_mean <- sweep(three_mean, 1, tx.len, "/")
three_mean <- sweep(three_mean, 2, colSums(three_mean), "/") * 1e6
three_mean <- log2(three_mean + 1)
nrow(myTpm)
nrow(three_mean)
three_expr <- three_expr[names(tx.len), ]
three_expr <- sweep(three_expr, 1, tx.len, "/")
three_expr <- sweep(three_expr, 2, colSums(three_expr), "/") * 1e6
three_expr <- log2(three_expr + 1)
data <- inner_join(add_rownames(myTpm_mean, "gene"), add_rownames(three_mean, "gene"))
head(data)
data <- data.frame(row.names = data$gene, data[-1])
dt.ctr <- data - rowMeans(data)
dt.svd <- svd(dt.ctr) # SVD
barplot(dt.svd$v[, 1]) # PC1
dt2 <- t(apply(dt.ctr, 1, function (x) {lm(x ~ dt.svd$v[, 1])$res}))
dt3 <- dt2 + rowMeans(data)
heatmap(cor(dt3))
tfh <- dt3[, c("PP1", "PP2", "TFH_Rep1", "TFH_Rep2")]
data <- inner_join(add_rownames(myTpm, "gene"), add_rownames(three_expr, "gene"))
data <- data.frame(row.names = data$gene, data[-1])
head(data)
names(data) <- gsub("^T.*\\.", "", names(data))
head(data)
dt.ctr <- data - rowMeans(data)
dt.svd <- svd(dt.ctr) # SVD
barplot(dt.svd$v[, 1]) # PC1
dt2 <- t(apply(dt.ctr, 1, function (x) {lm(x ~ dt.svd$v[, 1])$res}))
dt3 <- dt2 + rowMeans(data)
hc1 <- hcluster(t(dt3), method = "pearson", link = "average")
plot(as.phylo(hc1), edge.width = 2, font = 2, label.offset = 3e-4)
tfh <- dt3[, c("PP1", "PP2", "TFH_Rep1", "TFH_Rep2")]
colSums(tfh)
group <- factor(c("PP", "PP", "TFH", "TFH"), levels = c("PP", "TFH"))
ttest <- rowttests(tfh, group) # ttests
tfh <- as.data.frame(tfh)
tfh$PP_avg <- rowMeans(tfh[group == "PP"])
tfh$TFH_avg <- rowMeans(tfh[group == "TFH"])
tfh <- cbind(tfh, ttest)
tfh_select <- tfh[tfh$p.value < 0.05 & abs(tfh$dm) > 0.5, ]
gdt <- tfh
gdt$select = "N"
gdt[rownames(tfh_select), "select"] = "Y"
ggplot(gdt, aes(x = PP_avg, y = TFH_avg)) +
geom_point(aes(colour = factor(select, levels = c("Y", "N")))) +
geom_abline(intercept = 0, slope = 1) +
scale_color_manual(values = c("firebrick1", "grey30")) +
theme_bw() + theme(legend.title = element_blank())
library(ggplot2)
ggplot(gdt, aes(x = PP_avg, y = TFH_avg)) +
geom_point(aes(colour = factor(select, levels = c("Y", "N")))) +
geom_abline(intercept = 0, slope = 1) +
scale_color_manual(values = c("firebrick1", "grey30")) +
theme_bw() + theme(legend.title = element_blank())
pdf("scatterplot5.pdf", width = 7, height = 6)
ggplot(gdt, aes(x = PP_avg, y = TFH_avg)) +
geom_point(aes(colour = factor(select, levels = c("Y", "N")))) +
geom_abline(intercept = 0, slope = 1) +
scale_color_manual(values = c("firebrick1", "grey30")) +
theme_bw() + theme(legend.title = element_blank())
dev.off()
nrow(tfh)
head(tfh_select)
x = tfh_select[order(tfh_select$dm), ]
write.xlsx(x, file = "tfh.xlsx", sheetName = "TFH_2")
nrow(tfh_select)
library(ape)
library(amap)
library(dplyr)
library(tidyr)
library(reshape)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(ggplot2)
library(VennDiagram)
rm(list = ls())
setwd("~/Dropbox/GitHub/ATAC/")
source("../../X/function.R")
setwd("~/Dropbox/GitHub/CHIP/")
source("../../X/function.R")
(files = list.files("broadPeak/")) # atac broadPeak (all samples)
peaks = lapply(files, function(x) readBroadPeak(paste0("broadPeak/", x))) %>% GRangesList
(names(peaks) <- c(paste0("Ast", 1:3), paste0("Neu", 1:6)))
(peaks.All <- reduce(unlist(peaks), ignore.strand = T))
library(genomation)
peaks = lapply(files, function(x) readBroadPeak(paste0("broadPeak/", x))) %>% GRangesList
(names(peaks) <- c(paste0("Ast", 1:3), paste0("Neu", 1:6)))
(peaks.All <- reduce(unlist(peaks), ignore.strand = T))
peaks.bi <- sapply(peaks, function(x) countOverlaps(peaks.All, x)) & 1
head(peaks.bi)
table(rowSums(peaks.bi)) # unique peak number: 64%
(number.1 <- colSums(peaks.bi & rowSums(peaks.bi) == 1)) # unique peak each sample
(number.All <- sapply(peaks, length)) # peak number each sample
peaks.All.select <- peaks.All[rowSums(peaks.bi) > 1, ]
hist(width(peaks.All.select), n = 1e3, col = "red", border = "red")
peaks.All.select
peaks.bi.select <- peaks.bi[rowSums(peaks.bi) > 1, ] + 0
sapply(peaks.bi.select, length)
head(peaks.bi.select)
hc1 <- hcluster(t(peaks.bi.select), method = "pearson", link = "average") %>% as.phylo
mycol = c(rep("blue", 3), rep("red", 6))
plot(hc1, label.offset=1e-2, tip.color = mycol, direction="downward")
dim(peaks.bi.select)
peaks.bi.select.Ast = rowSums(peaks.bi.select[, 1:3]) & 1
peaks.bi.select.Neu = rowSums(peaks.bi.select[, 4:9]) & 1
vennList = list(Ast = which(peaks.bi.select.Ast), Neu = which(peaks.bi.select.Neu))
peaks.bi.select.Ast
length(peaks.bi.select.Ast)
txdb = keepStandardChromosomes(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb.gr = GenomicRangesList(cds = cds(txdb), exons = exons(txdb), genes = genes(txdb), promoters = promoters(txdb))
txdb.gr$introns = unlist(intronsByTranscript(txdb))
txdb.gr$five = unlist(fiveUTRsByTranscript(txdb))
txdb.gr$three = unlist(threeUTRsByTranscript(txdb))
txdb.gr = lapply(txdb.gr, function(x) {strand(x) = "*"; reduce(x)})
txdb.gr$intergenic = gaps((txdb.gr$genes + 3e3))
txdb.gr$intergenic = txdb.gr$intergenic[strand(txdb.gr$intergenic) == "*", ]
overlap.bs = sapply(peaks, function(x) sapply(txdb.gr, function(y) sum(width(intersect(x, y)))))
overlap.bs
overlap.ct.pk = sapply(peaks, function(x) sapply(txdb.gr, function(y) sum(countOverlaps(x, y) & 1))) # of peak
overlap.ct.gs = sapply(peaks, function(x) sapply(txdb.gr, function(y) sum(countOverlaps(y, x) & 1))) # of feature
(bs2pk = sweep(overlap.bs, 2, sapply(peaks, function(x) sum(width(x))), "/")) # to peak in bp
(bs2gs = sweep(overlap.bs, 1, sapply(txdb.gr, function(x) sum(width(x))), "/")) # to gene structure in bp
(ct2pk = sweep(overlap.ct.pk, 2, sapply(peaks, length), "/")) # to peak in count
(ct2gs = sweep(overlap.ct.gs, 1, sapply(txdb.gr, length), "/")) # to gene structure in count
openAll = sapply(peaks, function(x) sum(width(x))) / sum(as.numeric(seqlengths(txdb)))
openAll
ggplot(melt(odds_feature), aes(x = X1, y = value, fill = X1)) + geom_boxplot() +
scale_fill_manual(values = col) + theme_bw() + theme(legend.position = "none")
odds_feature = sweep(bs2gs, 2, openAll, "/")
ggplot(melt(odds_feature), aes(x = X1, y = value, fill = X1)) + geom_boxplot() +
scale_fill_manual(values = col) + theme_bw() + theme(legend.position = "none")
genes = genes(txdb)
genes.tts = resize(genes, 1)
promoters = promoters(genes.tts, 2000, 200) # upstream:2000; downstream:200
promoters$symbol = select(org.Hs.eg.db, promoters$gene_id, columns=c("SYMBOL"), keytype="ENTREZID")$SYMBOL
open_promoters <- GRangesList(lapply(peaks, function(x) subsetByOverlaps(promoters, x)))
genesAst = names(which(table(unlist(open_promoters[1:3])$symbol) == 3))
genesNeu = names(which(table(unlist(open_promoters[4:9])$symbol) == 6))
genesAst
length(genesAst)
length(genesNeu)
open_promoters
sapply(open_promoters, length)
overlap.ct.gs
length(genesAst)
length(genesAst) / length(which(peaks.bi.select.Ast))
length(which(peaks.bi.select.Ast))
length(genesNeu) / length(which(peaks.bi.select.Neu))
622 / 25835
3823 / 48838
length(peaks.bi.select.Ast)
length(peaks.bi.select.Neu)
peaks.All.select
length(peaks.All.select)
head(! peaks.bi.select.Neu)
head(peaks.bi.select.Ast)
x = ! peaks.bi.select.Neu
y = peaks.bi.select.Ast
x & y
z = x & y
x[1:20]
y[1:20]
z[1:20]
x = ! x
x[1:20]
z = x & y
z[1:20]
peaks.Ast.select <- peaks.All.select[peaks.bi.select.Ast & (! peaks.bi.select.Neu), ]
length(peaks.Ast.select)
peaks.Neu.select <- peaks.All.select[(! peaks.bi.select.Ast) & peaks.bi.select.Neu, ]
length(peaks.Neu.select)
peaks.specific <- GRangesList(Ast = peaks.Ast.select, Neu = peaks.Neu.select)
open_promoters_specific <- GRangesList(lapply(peaks_specific, function(x) subsetByOverlaps(promoters, x)))
open_promoters_specific <- GRangesList(lapply(peaks.specific, function(x) subsetByOverlaps(promoters, x)))
length(open_promoters_specific)
open_promoters_specific[[1]]
open_promoters_specific_genes = lapply(open_promoters_specific, function(x) {y = x$symbol; y[! is.na(y)]})
lapply(open_promoters_specific_genes, length)
sapply(open_promoters_specific_genes, length)
sapply(peaks_specific_genes, length)
sapply(peaks.specific, length)
sapply(open_promoters_specific_genes, length) / sapply(peaks.specific, length)
570 / 25835
1678 / 48838
venn.diagram(open_promoters_specific_genes, imagetype="png", file="pdf/venn4.png", width=500, height=500, resolution=200)
overlap.bs.2 = sapply(peaks.specific, function(x) sapply(txdb.gr, function(y) sum(width(intersect(x, y)))))
overlap.bs.2
(bs2gs.2 = sweep(overlap.bs.2, 1, sapply(txdb.gr, function(x) sum(width(x))), "/")) # to gene structure in bp
colSums(bs2gs.2)
sapply(peaks.specific, length)
(bs2pk.2 = sweep(overlap.bs.2, 2, sapply(peaks, function(x) sum(width(x))), "/")) # to peak in bp
(bs2pk.2 = sweep(overlap.bs.2, 2, sapply(peaks.specific, function(x) sum(width(x))), "/")) # to peak in bp
colSums(bs2pk.2)
(bs2gs.2 = sweep(overlap.bs.2, 1, sapply(txdb.gr, function(x) sum(width(x))), "/")) # to gene structure in bp
sweep(bs2gs.2, 1, colSums(bs2gs.2), "/")
x = sweep(bs2gs.2, 1, colSums(bs2gs.2), "/")
colSums(x)
x = sweep(bs2gs.2, 2, colSums(bs2gs.2), "/")
colSums(x)
x
(bs2pk.2 = sweep(overlap.bs.2, 2, sapply(peaks.specific, function(x) sum(width(x))), "/")) # to peak in bp
melt(bs2pk.2)
ggplot(melt(bs2pk.2), aes(x = X1, y = value, fill = X1)) + geom_boxplot() +
scale_fill_manual(values = col) + theme_bw() + theme(legend.position = "none")
col
ggplot(melt(bs2pk.2), aes(x = X1, y = value, fill = X1)) + geom_boxplot() +
scale_fill_manual(values = c("blue", "red")) + theme_bw() + theme(legend.position = "none")
ggplot(melt(bs2pk.2), aes(x = X1, y = value, fill = X1)) + geom_boxplot() +
theme_bw() + theme(legend.position = "none")
ggplot(melt(bs2pk.2), aes(x = X1, y = value, fill = X1)) + geom_bar(stat = "identity") +
theme_bw() + theme(legend.position = "none")
ggplot(melt(bs2pk.2), aes(x = X1, y = value, group = X1)) + geom_bar(stat = "identity") +
theme_bw() + theme(legend.position = "none")
melt(bs2pk.2)
ggplot(melt(bs2pk.2), aes(x = X1, y = value, group = X2)) + geom_bar(stat = "identity") +
theme_bw() + theme(legend.position = "none")
ggplot(melt(bs2pk.2), aes(x = X1, y = value, fill = X2)) + geom_bar(stat = "identity") +
theme_bw() + theme(legend.position = "none")
ggplot(melt(bs2pk.2), aes(x = X1, y = value, fill = X2)) + geom_bar(stat = "identity", position = "dodge") +
theme_bw() + theme(legend.position = "none")
ggplot(melt(bs2pk.2), aes(x = X1, y = value, fill = X2)) + geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("blue", "red")) + theme_bw() + theme(legend.position = "none")
ggplot(melt(bs2pk.2), aes(x = X1, y = value, fill = X2)) + geom_bar(stat = "identity", position = "dodge") +
scale_fill_manual(values = c("blue", "red")) + theme_bw()
ggplot(melt(bs2pk.2), aes(x = X1, y = value, fill = X2)) +
geom_bar(stat = "identity", position = "dodge") + scale_fill_manual(values = c("blue", "red")) + theme_bw()
sapply(open_promoters_specific_genes, length)
sapply(peaks.specific, length)
head(genesAst)
open_promoters
genesAst = unique(unlist(open_promoters[1:3])$symbol)
head(genesAst)
length(genesAst)
genesNeu = unique(unlist(open_promoters[4:9])$symbol)
length(genesNeu)
venn.diagram(vennList, imagetype = "png", file = "pdf/venn5.png", width = 500, height = 500, resolution = 200)
vennList <- list(Neuron = genesNeu, Astrocyte = genesAst)
venn.diagram(vennList, imagetype = "png", file = "pdf/venn5.png", width = 500, height = 500, resolution = 200)
genesAst = unique(unlist(open_promoters[1:3])$symbol)
genesNeu = unique(unlist(open_promoters[4:9])$symbol)
vennList <- list(Neuron = genesNeu, Astrocyte = genesAst)
venn.diagram(vennList, imagetype = "png", file = "pdf/venn5.png", width = 500, height = 500, resolution = 200)
genesAst
genesAst
vennList
table(is.na(genesNeu))
table(is.na(genesAst))
genesAst = genesAst[! is.na(genesAst)]
genesNeu = genesNeu[! is.na(genesNeu)]
vennList <- list(Neuron = genesNeu, Astrocyte = genesAst)
venn.diagram(vennList, imagetype = "png", file = "pdf/venn5.png", width = 500, height = 500, resolution = 200)
load("../Adsp/data/glmList.rdt")
select <- filter(glmList$gwas, LOD > 15) # permutation cut
names(glmList)
gwas = glmList$gwas
head(gwas)
nrow(gwas)
select <- filter(glmList$gwas, LOD > 15) # permutation cut
nrow(select)
load("Manu/data.rdt")
for(obj in names(data)) assign(obj, data[[obj]])
gwas.lod <- filter(gwas, LOD > 15) # permutation cut
vep.lod <- filter(vep, UID %in% gwas.lod$UID)
for(obj in names(list)) assign(obj, list[[obj]])
vep.lod <- filter(vep, UID %in% gwas.lod$UID)
names(glmList)
vep = glmList$vep
vep.lod <- filter(vep, UID %in% gwas.lod$UID)
gwas_vep_lod <- cbind(vep.lod, gwas.lod[match(vep.lod$UID, gwas.lod$UID), ])
nrow(gwas_vep_lod)
write.xlsx(gwas_vep_lod, file = "~/Desktop/file.xlsx", sheetName = "244")
