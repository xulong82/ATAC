colnames(est)
colnames(eset)
sampleInf <- read.xlsx("bRNA/B6/Sample.xlsx", sheetName = "Sheet1", stringsAsFactors = F)
sampleInf <- sampleInf[match(colnames(eset), sampleInf$Sample.Name), ]
sampleInf$Genotype[grep("wild type", sampleInf$Genotype)] <- "WT"
sampleInf$Genotype[grep("other", sampleInf$Genotype)] <- "MT"
mogene <- read.delim("./Yaa/B6/mogene2symbol.map", sep = "\t", stringsAsFactors = F)
mogene <- read.delim("bRNA/B6/mogene2symbol.map", sep = "\t", stringsAsFactors = F)
eset <- eset[rownames(eset) %in% mogene[, 1], ]
symbol <- mogene$Associated.Gene.Name[match(rownames(eset), mogene$Affy.MoGene.probeset)]
head(symbol)
eset <- apply(eset, 2, function(x) tapply(x, symbol, max))
eset <- eset[apply(eset, 1, function(x) min(x) > log2(120)), ]
fit <- apply(eset, 1, function(x) lm(x ~ sampleInf$Genotype))
sampleInf
group <- factor(sampleInf$Genotype, levels = c("WT", "MT"))
ttest <- rowttests(eset, group) # ttests
head(ttest)
nrow(ttest)
head(eset)
group
eset$WT_avg <- rowMeans(eset[group == "WT"])
eset$WT_avg <- rowMeans(eset[group == "WT", ])
head(eset)
eset <- exprs(norm.rma)
colnames(eset) <- gsub("GC_Gene1-0ST_(.*)_430.*", "\\1", colnames(eset))
eset <- eset[rownames(eset) %in% mogene[, 1], ]
symbol <- mogene$Associated.Gene.Name[match(rownames(eset), mogene$Affy.MoGene.probeset)]
eset <- apply(eset, 2, function(x) tapply(x, symbol, max))
eset <- eset[apply(eset, 1, function(x) min(x) > log2(120)), ]
eset = as.data.frame(eset)
ttest <- rowttests(eset, group) # ttests
ttest <- rowttests(as.matrix(eset), group) # ttests
eset$WT_avg <- rowMeans(eset[group == "WT"])
eset$MT_avg <- rowMeans(eset[group == "MT"])
eset$log2fold <- with(eset, log2(MT_avg) - log2(WT_avg))
head(eset)
eset <- cbind(eset, ttest)
eset$q.value <- qvalue(eset$p.value)$qvalues
head(eset)
eset_select <- eset[abs(eset$log2fold) > 0.3 & eset$q.value < 0.05, ]
eset_select <- eset[abs(eset$log2fold) > 0.2 & eset$q.value < 0.05, ]
eset_select <- eset[abs(eset$log2fold) > 0.2 & eset$q.value < 0.05, ]
eset_select <- eset[abs(eset$log2fold) > 0.1 & eset$q.value < 0.05, ]
table(eset$q.value)
hist(eset$q.value)
table(eset$q.value < 0.05)
eset_select <- eset[abs(eset$log2fold) > 0.1 & eset$p.value < 0.05, ]
table(eset$p.value < 0.05)
hist(eset$log2fold)
eset_select <- eset[eset$p.value < 0.05, ]
head(eset_select)
names(bxsbList)
names(bxsbList$RNA)
bxsbList$B6Array <- eset
head(eset)
save(bxsbList, file = "data/bxsbList.rdt")
gk <- myGK(rownames(eset_select))
data.frame(KEGG = gk$KEGG$Term[1:20], BP = gk$GO$BP$Term[1:20], MF = gk$GO$BP$Term[1:20])
head(ttest)
ttest$select = "N"
ttest$select[rownames(ttest) %in% rownames(eset_select)] = "S"
ggplot(ttest, aes(x = dm, y = -log10(p.value))) +
geom_point(aes(color = as.factor(select)), size = 1) +
scale_color_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("Effect") + ylab("-log10(pvalue)") +
theme(legend.position = "none")
-log10(0.05)
pdf("bRNA/vocano_b6.pdf", width = 6, height = 4)
ggplot(ttest, aes(x = dm, y = -log10(p.value))) +
geom_point(aes(color = as.factor(select)), size = 1) +
scale_color_manual(values = c("grey30", "firebrick1")) +
theme_bw() + xlab("Effect") + ylab("-log10(pvalue)") +
theme(legend.position = "none")
dev.off()
data.frame(KEGG = gk$KEGG$Term[1:20], BP = gk$GO$BP$Term[1:20], MF = gk$GO$BP$Term[1:20])
nrow(data)
nrow(data_select)
yaa_bxsb <- rownames(data_select)
yaa_b6 <- rownames(eset_select)
setdiff(yaa_bxsb, yaa_b6)
symbol
yaa_bxsb <- bxsbList$RNA$symbol
setdiff(yaa_bxsb, yaa_b6)
intersect(yaa_bxsb, yaa_b6)
?venn.diagram
venn.diagram(list(B6 = setdiff(yaa_b6, yaa_bxsb), BXSB = setdiff(yaa_bxsb, yaa_b6), YAA = intersect(yaa_bxsb, yaa_b6)),
imagetype = "tiff", file = "bRNA/venn.tiff", fill = c("firebrick1", "darkorchid2", "dodgerblue3"))
venn.diagram(list(B6 = setdiff(yaa_b6, yaa_bxsb), BXSB = setdiff(yaa_bxsb, yaa_b6), YAA = intersect(yaa_bxsb, yaa_b6)),
imagetype = "png", file = "bRNA/venn.png", fill = c("firebrick1", "darkorchid2", "dodgerblue3"))
venn.diagram(list(B6 = setdiff(yaa_b6, yaa_bxsb), BXSB = setdiff(yaa_bxsb, yaa_b6), YAA = intersect(yaa_bxsb, yaa_b6)),
imagetype = "png", file = "bRNA/venn.png", width = 1000, height = 1000)
venn.diagram(list(B6 = setdiff(yaa_b6, yaa_bxsb), BXSB = setdiff(yaa_bxsb, yaa_b6), YAA = intersect(yaa_bxsb, yaa_b6)),
imagetype = "png", file = "bRNA/venn.png", width = 2000, height = 2000)
geneList <- list(B6 = setdiff(yaa_b6, yaa_bxsb), BXSB = setdiff(yaa_bxsb, yaa_b6), YAA = intersect(yaa_bxsb, yaa_b6))
geneList <- list(B6 = setdiff(yaa_b6, yaa_bxsb), BXSB = setdiff(yaa_bxsb, yaa_b6), YAA = intersect(yaa_bxsb, yaa_b6))
venn.diagram(geneList, imagetype = "png", file = "bRNA/venn.png", width = 2000, height = 2000)
geneList
geneList$YAA
gk = myGK(geneList$BXSB)
data.frame(KEGG = gk$KEGG$Term[1:20], BP = gk$GO$BP$Term[1:20], MF = gk$GO$BP$Term[1:20])
gk = myGK(geneList$B6)
data.frame(KEGG = gk$KEGG$Term[1:20], BP = gk$GO$BP$Term[1:20], MF = gk$GO$BP$Term[1:20])
module
x =module[[1]]
x
toupper(x)
tlower(x)
tolower(x)
?tolower
charter(x)
chartr(x)
capwords(x)
cap(x)
captilize(x)
library(Hmisc)
> capitalize(name)
capitalize(x)
capitalize(tolower(x))
module <- lapply(module, function(x) capitalize(tolower(x)))
module[[1]]
module[[2]]
unlist(module)
bg <- union(rownames(eset), yaa_bxsb, unlist(module))
bg <- unique(c(rownames(eset), yaa_bxsb, unlist(module)))
bg
myhyper <- function(g1, g2) {  # Hypergeometric
if(length(intersect(g1, g2)) == 0) return(1)
1 - phyper(length(intersect(g1, g2)) - 1, length(g2), length(setdiff(bg, g2)), length(g1))
}  # Pr(count >= length(intersect(g1, g2)))
sapply(module, function(x) intersect(geneList$BXSB, x))
sapply(module, function(x) length)
sapply(module, length)
sapply(module, function(x) length(intersect(geneList$BXSB, x)))
sapply(module, function(x) myhyper(geneList$BXSB, x))
sapply(module, function(x) myhyper(geneList$BXSB, x)) %>% hist
sapply(module, function(x) myhyper(geneList$BXSB, x)) %>% hist(n = 100)
en1 = sapply(module, function(x) myhyper(geneList$BXSB, x))
en1
(int1 = sapply(module, function(x) length(intersect(geneList$BXSB, x))))
(enr1 = sapply(module, function(x) myhyper(geneList$BXSB, x)))
cbind(int1, enr1)
df = cbind(int1, enr1)
df = data.frame(value = c(df), module = rep(rownames(df), 2), type = rep(colnames(df), each = 81))
df
(int = sapply(module, function(x) length(intersect(geneList$BXSB, x))))
(enr = sapply(module, function(x) myhyper(geneList$BXSB, x)))
df = cbind(int, enr)
df = data.frame(value = c(df), module = rep(rownames(df), 2), type = rep(colnames(df), each = 81))
df = cbind(int, enr)
df = as.data.frame(cbind(int, enr))
head()df
df
df$module = rownames(df)
ggplot(df, aes(x = module, y = -log10(enr))) +
geom_point(aes(color = module, size = int))
pdf("bRNA/immgen.pdf")
ggplot(df, aes(x = module, y = -log10(enr))) +
geom_point(aes(color = module, size = int)) +
geom_hline(yintercept = 1.3, color = "red", linetype = "dashed") +
theme_bw() + xlab("") + ylab("") +
theme(panel.border = element_rect(size = 1, color = "grey30"),
axis.text = element_text(size = 10, angle = 90),
legend.text = element_text(size = 10),
legend.title = element_blank(), legend.key = element_blank())
dev.off()
pdf("bRNA/immgen.pdf", width = 8, height = 5)
ggplot(df, aes(x = module, y = -log10(enr))) +
geom_point(aes(color = module, size = int)) +
geom_hline(yintercept = 1.3, color = "red", linetype = "dashed") +
theme_bw() + xlab("") + ylab("") +
theme(legend.position = "none")
dev.off()
pdf("bRNA/immgen.pdf", width = 8, height = 5)
ggplot(df, aes(x = module, y = -log10(enr))) +
geom_point(aes(color = module, size = int)) +
geom_hline(yintercept = 1.3, color = "red", linetype = "dashed") +
theme_bw() + xlab("") + ylab("") + ylim(c(-1, 12)) +
theme(legend.position = "none")
dev.off()
pdf("bRNA/immgen.pdf", width = 8, height = 5)
ggplot(df, aes(x = module, y = -log10(enr))) +
geom_point(aes(color = module, size = int)) +
geom_hline(yintercept = 1.3, color = "red", linetype = "dashed") +
theme_bw() + xlab("") + ylab("") + ylim(c(-1, 15)) +
theme(legend.position = "none")
dev.off()
df$module = 1:81
pdf("bRNA/immgen.pdf", width = 8, height = 5)
ggplot(df, aes(x = module, y = -log10(enr))) +
geom_point(aes(color = module, size = int)) +
geom_hline(yintercept = 1.3, color = "red", linetype = "dashed") +
theme_bw() + xlab("") + ylab("") + ylim(c(-1, 12)) +
theme(legend.position = "none")
dev.off()
df$text[df$enr < 0.01] = which(df$enr < 0.01)
df
ggplot(df, aes(x = module, y = -log10(enr), text = text)) +
geom_point(aes(color = module, size = int)) + geom_text()
ggplot(df, aes(x = module, y = -log10(enr), label = text)) +
geom_point(aes(color = module, size = int)) + geom_text()
ggplot(df, aes(x = module, y = -log10(enr), label = text)) +
geom_point(aes(color = module, size = int)) + geom_text(vjust = -1)
ggplot(df, aes(x = module, y = -log10(enr), label = text)) +
geom_point(aes(color = module, size = int)) + geom_text(vjust = 1)
pdf("bRNA/immgen.pdf", width = 8, height = 5)
ggplot(df, aes(x = module, y = -log10(enr), label = text)) +
geom_point(aes(color = module, size = int)) + geom_text(vjust = 2)
geom_hline(yintercept = 1.3, color = "red", linetype = "dashed") +
theme_bw() + xlab("") + ylab("") + ylim(c(-1, 12)) +
theme(legend.position = "none")
dev.off()
df$module1 = 1:81
df$module2 = rownames(df)
pdf("bRNA/immgen.pdf", width = 8, height = 5)
ggplot(df, aes(x = module1, y = -log10(enr), label = text)) +
geom_point(aes(color = module2, size = int)) + geom_text(vjust = 2)
geom_hline(yintercept = 1.3, color = "red", linetype = "dashed") +
theme_bw() + xlab("") + ylab("") + ylim(c(-1, 12)) +
theme(legend.position = "none")
dev.off()
pdf("bRNA/immgen.pdf", width = 8, height = 5)
ggplot(df, aes(x = module1, y = -log10(enr), label = text)) +
geom_point(aes(color = module2, size = int)) + geom_text(vjust = 2) +
geom_hline(yintercept = 1.3, color = "red", linetype = "dashed") +
theme_bw() + xlab("") + ylab("") + ylim(c(-1, 12)) +
theme(legend.position = "none")
dev.off()
module[24:25]
m24 = module[[24]]
m25 = module[[25]]
intersect(m24, m25)
gk24 = myGK(m24)
gk = gk24
data.frame(KEGG = gk$KEGG$Term[1:10], BP = gk$GO$BP$Term[1:10], MF = gk$GO$BP$Term[1:10])
m25 = module[[25]]
gk = myGK(m25)
data.frame(KEGG = gk$KEGG$Term[1:10], BP = gk$GO$BP$Term[1:10], MF = gk$GO$BP$Term[1:10])
library(dplyr)
library(genomation)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(VariantAnnotation)
library(ggplot2)
library(biomaRt)
rm(list = ls())
setwd("~/Dropbox/GitHub/ATAC/")
(files = list.files("broadPeak/"))
peaks = lapply(files, function(x) readBroadPeak(paste0("broadPeak/", x)))
names(peaks) = gsub("_S[1-9]_.*", "", files)
gene.parts = readTranscriptFeatures("bed/hg19_refseq_ucsc.bed")
annotateWithGeneParts(x, gene.parts)
names(gene.parts)
exons <- reduce(gene.parts$exons)
annotateWithFeature(target = x, feature = gene.parts$exons)
promoters <- reduce(gene.parts$promoters)
score_matrix <- ScoreMatrix(target = x, windows = gene.parts$promoters)
score_matrix <- ScoreMatrixBin(target = x, windows = promoters, bin.num = 50)
x = peaks[[1]]
score_matrix <- ScoreMatrix(target = x, windows = gene.parts$promoters)
?heatMatrix
atac_exons_gr <- lapply(peaks, function(x) subsetByOverlaps(gene.parts$exons, x))
atac_exons_genes <- lapply(atac_exons_gr, function(x) unique(x$name))
atac_exons_genes[[1]]
promoters = gene.parts$TSSes
start(promoters) = start(promoters) - 1e3
end(promoters) = end(promoters) + 1e3
atac_promoters_gr <- lapply(peaks, function(x) subsetByOverlaps(promoters, x))
atac_promoters_genes <- lapply(atac_promoters_gr, function(x) unique(x$name))
atac_promoters_genes <- lapply(atac_promoters_genes, function(x) {
symbol = getBM("external_gene_name", "refseq_mrna", x, ensembl)
symbol$external_gene_name %>% unique
})
ensembl = useMart("ensembl",dataset = "hsapiens_gene_ensembl")
atac_promoters_genes <- lapply(atac_promoters_genes, function(x) {
symbol = getBM("external_gene_name", "refseq_mrna", x, ensembl)
symbol$external_gene_name %>% unique
})
atac_promoters_genes[[1]]
atac_promoters_genes_astrocyte = unlist(atac_promoters_genes[1:3])
table(atac_promoters_genes_astrocyte)
table(table(atac_promoters_genes_astrocyte))
which(table(atac_promoters_genes_astrocyte) == 3)
names(which(table(atac_promoters_genes_astrocyte) == 3)) %>% length
names(which(table(atac_promoters_genes_astrocyte) == 3))
atac_promoters_genes_astrocyte = names(which(table(atac_promoters_genes_astrocyte) == 3))
names(peaks)
atac_promoters_genes_neuron = unlist(atac_promoters_genes[4:9])
table(table(atac_promoters_genes_neuron))
atac_promoters_genes_neuron = names(which(table(atac_promoters_genes_neuron) == 3))
library(dplyr)
library(GOstats)
library(KEGG.db)
library(org.Hs.eg.db)
library(Category)
library(pathview)
library(ggplot2)
geneId = atac_promoters_genes_astrocyte
geneId = atac_promoters_genes_neuron
universe_go <- get("org.Hs.egGO") %>% Lkeys
universe_kegg <- get("org.Hs.egPATH") %>% Lkeys
entrezId <- mget(geneId, org.Hs.egSYMBOL2EG, ifnotfound = NA) %>% na.omit %>% unlist
myGO <- lapply(c("BP", "MF", "CC"), function(category) {
cat(category, "\n")
params <- new("GOHyperGParams", geneIds = entrezId, universeGeneIds = universe_go,
annotation = "org.Hs.eg.db", ontology = category, pvalueCutoff = 0.001, testDirection = "over")
hyperGTest(params) %>% summary
}); names(myGO) <- c("BP", "MF", "CC")
params <- new("KEGGHyperGParams", geneIds=entrezId, universeGeneIds = universe_kegg,
annotation="org.Hs.eg.db", categoryName = "KEGG", pvalueCutoff = 0.05, testDirection="over")
kegg <- hyperGTest(params) %>% summary
glist <- geneIdsByCategory(over)
glist <- sapply(glist, function(x) {y <- mget(x, envir=org.Hs.egSYMBOL); paste(y, collapse=";")})
kegg$Symbols <- glist[as.character(kegg$KEGGID)]
glist <- geneIdsByCategory(kegg)
names(myGO)
myGO$BP
kegg
atac_promoters_genes_neuron_go = myGO
atac_promoters_genes_neuron_kegg = kegg
geneId = atac_promoters_genes_astrocyte
universe_go <- get("org.Hs.egGO") %>% Lkeys
universe_kegg <- get("org.Hs.egPATH") %>% Lkeys
entrezId <- mget(geneId, org.Hs.egSYMBOL2EG, ifnotfound = NA) %>% na.omit %>% unlist
myGO <- lapply(c("BP", "MF", "CC"), function(category) {
cat(category, "\n")
params <- new("GOHyperGParams", geneIds = entrezId, universeGeneIds = universe_go,
annotation = "org.Hs.eg.db", ontology = category, pvalueCutoff = 0.001, testDirection = "over")
hyperGTest(params) %>% summary
}); names(myGO) <- c("BP", "MF", "CC")
params <- new("KEGGHyperGParams", geneIds=entrezId, universeGeneIds = universe_kegg,
annotation="org.Hs.eg.db", categoryName = "KEGG", pvalueCutoff = 0.05, testDirection="over")
kegg <- hyperGTest(params) %>% summary
kegg
myGO$BP
atac_promoters_genes_astrocyte_go = myGO
atac_promoters_genes_astrocyte_kegg = kegg
dataList <- list(neuron_gene = atac_promoters_genes_neuron, astrocyte_gene = atac_promoters_genes_astrocyte,
neuron_go = atac_promoters_genes_neuron_go, astrocyte_go = atac_promoters_genes_astrocyte_go,
neuron_kegg = atac_promoters_genes_neuron_kegg, astrocyte_kegg = atac_promoters_genes_astrocyte_kegg)
save(dataList, file = "dataList.rdt")
atac_promoters_genes_neuron = unlist(atac_promoters_genes[4:9])
table(table(atac_promoters_genes_neuron))
atac_promoters_genes_neuron = names(which(table(atac_promoters_genes_neuron) == 6))
geneId = atac_promoters_genes_neuron
entrezId <- mget(geneId, org.Hs.egSYMBOL2EG, ifnotfound = NA) %>% na.omit %>% unlist
myGO <- lapply(c("BP", "MF", "CC"), function(category) {
cat(category, "\n")
params <- new("GOHyperGParams", geneIds = entrezId, universeGeneIds = universe_go,
annotation = "org.Hs.eg.db", ontology = category, pvalueCutoff = 0.001, testDirection = "over")
hyperGTest(params) %>% summary
}); names(myGO) <- c("BP", "MF", "CC")
params <- new("KEGGHyperGParams", geneIds=entrezId, universeGeneIds = universe_kegg,
annotation="org.Hs.eg.db", categoryName = "KEGG", pvalueCutoff = 0.05, testDirection="over")
kegg <- hyperGTest(params) %>% summary
kegg
myGO$Term[1:20]
myGO$BP$Term[1:20]
atac_promoters_genes_neuron_go = myGO
atac_promoters_genes_neuron_kegg = kegg
dataList <- list(neuron_gene = atac_promoters_genes_neuron, astrocyte_gene = atac_promoters_genes_astrocyte,
neuron_go = atac_promoters_genes_neuron_go, astrocyte_go = atac_promoters_genes_astrocyte_go,
neuron_kegg = atac_promoters_genes_neuron_kegg, astrocyte_kegg = atac_promoters_genes_astrocyte_kegg)
save(dataList, file = "dataList.rdt")
library(dplyr)
library(genomation)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(VariantAnnotation)
library(ggplot2)
library(biomaRt)
rm(list = ls())
uni_go <- get("org.Mm.egGO") %>% Lkeys
uni_kg <- get("org.Mm.egPATH") %>% Lkeys
source('~/Dropbox/X/function.R', echo=TRUE)
source("../../function.R")
setwd("~/Dropbox/GitHub/ATAC/")
source("../../function.R")
getwd()
source("../../X/function.R")
rm(list = ls())
setwd("~/Dropbox/GitHub/ATAC/")
source("../../X/function.R")
(files = list.files("broadPeak/"))
peaks = lapply(files, function(x) readBroadPeak(paste0("broadPeak/", x)))
names(peaks) = gsub("_S[1-9]_.*", "", files)
x = peaks[[1]]
summary(mcols(x)$score)  # is filter required?
sapply(peaks, length)
gene.parts = readTranscriptFeatures("bed/hg19_refseq_ucsc.bed")
names(gene.parts)
annotateWithFeature(target = x, feature = gene.parts$exons)
score_matrix <- ScoreMatrix(target = x, windows = gene.parts$promoters)
heat.colors(10)
pdf("pdf/score_matrix.pdf", width = 10, height = 6, col = heat.colors(10))
heatMatrix(score_matrix, col = heat.colors(10))
my_palette <- colorRampPalette(c("red", "yellow", "green"))(n = 299)
heatMatrix(score_matrix, col = my_palette)
heatMatrix(score_matrix[1:1000, ], col = my_palette)
heatMatrix(score_matrix, col = my_palette)
load("dataList.rdt")
names(dataLit.rdt)
names(dataList.rdt)
names(dataList)
load("../Adsp/data/glmList.rdt"); list <- glmList
for(obj in names(list)) assign(obj, list[[obj]])
vep$Symbol <- gsub(".*SYMBOL=(.*)", "\\1", vep$Symbol)
gwas_lod <- filter(gwas, LOD > 15) # permutation cut
vep_lod <- filter(vep, UID %in% gwas_lod$UID)
gwas_vep <- cbind(vep_lod, gwas_lod[match(vep_lod$UID, gwas_lod$UID), -1])
gwas_vep <- dplyr::mutate(gwas_vep, start = POS, end = POS)
gwas_gr <- makeGRangesFromDataFrame(gwas_vep, keep.extra.columns = T)
gwas_gr <- renameSeqlevels(gwas_gr, paste0("chr", seqlevels(gwas_gr)))
gwas_gr
gene_astrocytes = lapply(atac_gwas_gr[grep("astrocytes", names(atac_gwas_gr))], function(x) x$Symbol) %>% unlist %>% unique
atac_gwas_gr <- lapply(peaks, function(idx) subsetByOverlaps(gwas_gr, idx))
gene_astrocytes = lapply(atac_gwas_gr[grep("astrocytes", names(atac_gwas_gr))], function(x) x$Symbol) %>% unlist %>% unique
gene_neurons = lapply(atac_gwas_gr[grep("neurons", names(atac_gwas_gr))], function(x) x$Symbol) %>% unlist %>% unique
intersect(gene_astrocytes, gene_neurons)
load("atac_gwas.rdt")
names(atac_gwas)
atac_gwas_gr = atac_gwas$atac_gwas_gr
neuron_gwas_gr = atac_gwas$neuron_gwas_gr
astrocyte_gwas_gr = atac_gwas$astrocyte_gwas_gr
dataList$astrocyte_gwas_gr = atac_gwas$astrocyte_gwas_gr
dataList$neuron_gwas_gr = atac_gwas$neuron_gwas_gr
dataList$atac_gwas_gr = atac_gwas$atac_gwas_gr
names(dataList)
sapply(atac_gwas_gr, length)
atac_gwas_gr[[1]]
atac_gwas_gr[[1]]$feature
atac_gwas_gr[[1]]$features
atac_gwas_gr[[1]]$Feature
atac_gwas_gr[[1]]$Feature %>% unique
atac_gwas_gr[[1]]$Consequence
atac_gwas_gr[[1]]$c("Feature") %>% unique
atac_gwas_gr[[1]][c("Feature")] %>% unique
mcol(atac_gwas_gr[[1]])
mcols(atac_gwas_gr[[1]])
mcols(atac_gwas_gr[[1]])["Consequence"]
mcols(atac_gwas_gr[[1]])["Feature", "Consequence"]
mcols(atac_gwas_gr[[1]])[c("Feature", "Consequence")]
save(dataList, file = "dataList.rdt")
intersect(atac_promoters_genes_neuron, atac_promoters_genes_neuron)
for(obj in names(dataList)) assign(obj, dataList[[obj]])
intersect(atac_promoters_genes_neuron, atac_promoters_genes_neuron)
dataList$atac_promoters_genes_neuron = neuron_gene
dataList$neuron_gene = NULL
dataList$atac_promoters_genes_astrocyte = astrocyte_gene
dataList$astrocyte_gene = NULL
dataList$atac_promoters_genes_neuron_go = atac_promoters_genes_neuron_go
dataList$atac_promoters_genes_neuron_go = neuron_go
dataList$atac_promoters_genes_neuron_kegg = neuron_kegg
dataList$atac_promoters_genes_astrocyte_go = astrocyte_go
dataList$atac_promoters_genes_astrocyte_kegg = astrocyte_kegg
dataList$neuron_go = dataList$neuron_kegg = NULL
dataList$astrocyte_go = dataList$astrocyte_kegg = NULL
names(dataList)
save(dataList, file = "dataList.rdt")
load("dataList.rdt") # Saved
for(obj in names(dataList)) assign(obj, dataList[[obj]])
intersect(atac_promoters_genes_neuron, atac_promoters_genes_neuron)
intersect(atac_promoters_genes_neuron, atac_promoters_genes_neuron) %>% length
length(atac_promoters_genes_astrocyte)
intersect(atac_promoters_genes_neuron, atac_promoters_genes_astrocyte)
length(atac_promoters_genes_astrocyte)
setdiff(atac_promoters_genes_neuron, atac_promoters_genes_astrocyte)
setdiff(atac_promoters_genes_astrocyte, atac_promoters_genes_neuron)
geneId = setdiff(atac_promoters_genes_neuron, atac_promoters_genes_astrocyte)
hsGK(geneId)
neuron_file <- "Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt"
astrocyte_file <- "Astrocytes_vs_neurons.HOMER_sorted_final_header_positive.txt"
neuron <- read.delim(paste0("diff/", neuron_file), stringsAsFactors = F)
astrocyte <- read.delim(paste0("diff/", astrocyte_file), stringsAsFactors = F)
neuron <- dplyr::select(neuron, -one_of("chr", "start", "end", "strand", "width"))
neuron_gr <- makeGRangesFromDataFrame(neuron, keep.extra.columns = T)
astrocyte <- dplyr::select(astrocyte, -one_of("chr", "start", "end", "strand", "width"))
astrocyte_gr <- makeGRangesFromDataFrame(astrocyte, keep.extra.columns = T)
neuron_gr
head(neuron)
neuron_specific_atac_promoters_gr = subsetByOverlaps(promoters, neuron_gr)
neuron_gr
promoters <- gene.parts$TSSes
start(promoters) <- start(promoters) - 1e3
end(promoters) <- end(promoters) + 1e3
atac_promoters_gr <- lapply(peaks, function(x) subsetByOverlaps(promoters, x))
atac_promoters_genes <- lapply(atac_promoters_gr, function(x) unique(x$name))
peaks[[1]]
neuron_gr
neuron_specific_atac_promoters_gr = subsetByOverlaps(promoters, neuron_gr)
neuron_specific_atac_promoters_gr %>% length
neuron_specific_atac_promoters_gr
neuron_specific_atac_promoters_genes <- unique(neuron_specific_atac_promoters_gr$name)
ensembl = useMart("ensembl",dataset = "hsapiens_gene_ensembl")
myMart = getBM("external_gene_name", "refseq_mrna", neuron_specific_atac_promoters_genes, ensembl)
neuron_specific_atac_promoters_genes <- myMart$external_gene_name %>% unique
astrocyte_specific_atac_promoters_gr = subsetByOverlaps(promoters, astrocyte_gr)
astrocyte_specific_atac_promoters_genes <- unique(astrocyte_specific_atac_promoters_gr$name)
myMart = getBM("external_gene_name", "refseq_mrna", astrocyte_specific_atac_promoters_genes, ensembl)
astrocyte_specific_atac_promoters_genes <- myMart$external_gene_name %>% unique
neuron_specific_atac_promoters_genes_gk <- hsGK(neuron_specific_atac_promoters_genes)
astrocyte_specific_atac_promoters_genes_gk <- hsGK(astrocyte_specific_atac_promoters_genes)
gk = neuron_specific_atac_promoters_genes_gk
data.frame(KEGG = gk$KEGG$Term[1:20], BP = gk$GO$BP$Term[1:20], MF = gk$GO$BP$Term[1:20])
gk = astrocyte_specific_atac_promoters_genes_gk
data.frame(KEGG = gk$KEGG$Term[1:20], BP = gk$GO$BP$Term[1:20], MF = gk$GO$BP$Term[1:20])
dataList$neuron_specific_atac_promoters_genes = neuron_specific_atac_promoters_genes
dataList$neuron_specific_atac_promoters_genes_gk = neuron_specific_atac_promoters_genes_gk
dataList$astrocyte_specific_atac_promoters_genes = astrocyte_specific_atac_promoters_genes
dataList$astrocyte_specific_atac_promoters_genes_gk = astrocyte_specific_atac_promoters_genes_gk
save(dataList, file = "dataList.rdt")
heatMatrix(score_matrix)
