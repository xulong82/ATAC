qqplot(sqrt( theoretical ), sqrt( s2 ),ylim=LIM,xlim=LIM)
qqplot(sqrt( theoretical ), sqrt( s2 ))
?fitFDist
0.45 * 0.55
0.45 * 0.55 / 20
0.45 * 0.55 * 20
sqrt(0.45 * 0.55 * 20)
sqrt(0.45 * 0.55 * 20) / 20
library(Biobase)
library(SpikeInSubset)
data(rma95)
y <- exprs(rma95)
pData(rma95)
g <- factor(rep(0:1,each=3))
spike <- rownames(y) %in% colnames(pData(rma95))
spike
library(genefilter)
x = rowttests(y, g)
?rowttests
str(x)
head(x)
sig = x$p.value < 0.01
table(sig)
1 - sum(spike & sig ) / sum(sig)
head(y)
?rowVar
rowvar
?rowVars
sds = rowSds(y[, 1:3])
sds
spike
sig
group = spike
group[sig] = true_pos
x = rep("T_POS", length(spike))
x
x[(! sig) & spike] = "F_NEG"
x[(! sig) & (! spike)] = "T_NEG"
x[(sig) & (! spike)] = "F_POS"
x
boxplot(x)
?boxplot
table(x)
boxplot(sds, x)
boxplot(sds ~ x)
boxplot(split(sds, x))
library(limma)
fit <- lmFit(y, design=model.matrix(~ g))
colnames(coef(fit))
fit[[1]]
length(fit)
coef(fit)
head(coef(fit))
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
sampleSD = fit$sigma
posteriorSD = sqrt(fit$s2.post)
fit <- eBayes(fit)
posteriorSD = sqrt(fit$s2.post)
plot(sampleSD, posteriorSD)
abline(0, 1)
mean(sampleSD)
pvals = fit$p.value[,2]
length(pvals)
length(spike)
1 - sum(pvals < 0.01 & spike) / sum(spike)
sum(pvals < 0.01 & spike) / sum(pvals < 0.01)
library(limma)
fit = lmFit(y, design=model.matrix(~ g))
fit = eBayes(fit)
##second coefficient relates to diffences between group
pvals = fit$p.value[,2]
1 - sum(pvals < 0.01 & spike) / sum(spike)
pvals
pvals < 0.01
table(pvals < 0.01)
names(fit)
head(fit$p.value)
pvals = fit$p.value[, 2]
table(pvals < 0.01)
table(spikes)
table(spike)
rowttest(y)
rowttests(y)
y = rowttests(y)
head(y)
table(y[, 3] < 0.01)
y = rowttests(y, g)
g
y <- exprs(rma95)
z = rowttests(y, g)
table(z[, 3] < 0.01)
pvals
all(rownames(pvals) == names(spike))
sum((! pvals < 0.01) & spike)/ sum(pvals < 0.01)
sum((pvals < 0.01) & (! spike))/ sum(pvals < 0.01)
5.3 * 52
?pt
?qr
head(y)
y1 = y[1, ]
y1
g
lm(y1 ~ g)
summary(lm(y1 ~ g))
g
-0.0744 / 0.10605
?mrlm
?rlm
library(MASS)
?rlm
head(y)
rowVars(y)
vars = rowVars(y)
hist(vars)
hist(sqrt(vars))
?seq
seq(0, 1, by = 0.01)
p = seq(0, 1, by = 0.01)
6 * p * (1 - p)
sum(6 * p * (1 - p))
pi = 6 * p * (1 - p)
plot(p, pi)
mean(pi)
head(y)
dim(y)
x = rowVars(y[, 1:3])
x
n = length(x)
n
?pmax
pmax(x)
min(5:1)
pmin(5:1)
pmin(5:1, pi)
pmax(x, 0)
k = rnorm(10)
k
pmax(k, 0)
log(x)
digamma(11/2)
?digamma
log(11/2)
z <- log(x)
e <- z-digamma(df1/2)+log(df1/2)
df1 = 11
e <- z-digamma(df1/2)+log(df1/2)
emean <- mean(e)
evar <- sum((e-emean)^2)/(n-1)
evar <- evar - mean(trigamma(df1/2))
evar
df2 <- 2*trigammaInverse(evar)
s20 <- exp(emean+digamma(df2/2)-log(df2/2))
df2
s20
fitFDist(x, 11)
?sampling
library(rstan)
?sampling
log10
install.packages("ExomeDepth")
library(ExomeDepth)
data(exons.hg19)
head(exons.hg19)
data(ExomeCount)
ExomeCount
colnames(ExomeCount)
ExomeCount.dafr <- as(ExomeCount[, colnames(ExomeCount)], "data.frame")
head(ExomeCount.dafr)
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), "chr", "")
ExomeCount.dafr$chromosome <- gsub(as.character(ExomeCount.dafr$space), pattern = "chr", replacement = "")
head(ExomeCount.dafr)
99e-2
library(dplyr)
library(tidyr)
library(genomation)
library(GenomicFeatures)
library(VariantAnnotation)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(ggplot2)
library(biomaRt)
library(VennDiagram)
library(DiffBind)
library(pheatmap)
library(ape)
library(amap)
library(VennDiagram)
library(RColorBrewer)
txdb = keepStandardChromosomes(TxDb.Hsapiens.UCSC.hg19.knownGene)
genes(txdb)
transcripts(txdb)
threeUTRsByTranscript()
threeUTRsByTranscript(txdb)
x = as.data.frame(threeUTRsByTranscript(txdb))
head(x)
x = as.data.frame(threeUTRsByTranscript(txdb, use.names = T))
head(x)
names(x)
names(x)[[1]]
x = threeUTRsByTranscript(txdb, use.names = T)
head(x)
promoters(txdb, use.names = T)
promoters(txdb)
width(promoters(txdb))
promoters(txdb)
x = promoters(txdb)
x$tx_name
x = x$tx_name
x
table(duplicated(x))
gene_id_table <-select(org.Hs.eg.db, hg19_3UTR$UCSCKG_ID,
cols=c("SYMBOL", "ENTREZID"),
keytype="UCSCKG")
library(org.Hs.eg.db)
x
gene_id_table <-select(org.Hs.eg.db, hg19_3UTR$UCSCKG_ID,
cols=c("SYMBOL", "ENTREZID"),
keytype="UCSCKG")
gene_id_table <-select(org.Hs.eg.db, x, cols=c("SYMBOL", "ENTREZID"), keytype="UCSCKG")
gene_id_table <-select(org.Hs.eg.db, x, columns=c("SYMBOL", "ENTREZID"), keytype="UCSCKG")
head(gene_id_table)
org.Hs.eg.db
?select
y <-select(org.Hs.eg.db, x, columns=c("SYMBOL", "ENTREZID"), keytype="UCSCKG")
head(y)
is.na(y$SYMBOL)
table(is.na(y$SYMBOL))
x
y
y[1:20, ]
promoters(txdb)[1:20, ]
genes(txdb)
genes(txdb, use.names = T)
head(y)
y[y$ENTREZID == "1", ]
y[y$ENTREZID == 1, ]
head(y)
y$ENTREZID
head(y[y$ENTREZID == 1, ])
x
genes(txdb)
x = genes(txdb)$gene_id
head(x)
y <-select(org.Hs.eg.db, x, columns=c("SYMBOL", "ENTREZID"), keytype="ENTREZID")
head(y)
Txdb.class(txdb)
txdb.class
txdb.class()
class(txdb)
data(txdb)
library(Homo.sapiens)
ghs<- genes(Homo.sapiens)
ghs
resize(ghs, 1)
?resize
genes.tts = resize(genes, 1)
genes = genes(txdb)
genes
genes.tts = resize(genes, 1)
genes.tts
genes.promoters = promoters(genes.tts, 2000, 200)
genes.promoters
head(width(genes.promoters))
y = select(org.Hs.eg.db, genes.promoters$gene_id, columns=c("SYMBOL", "ENTREZID"), keytype="ENTREZID")
head(y)
length(genes.promoters)
nrow(y)
table(y$ENTREZID == genes.promoters$gene_id)
genes = genes(txdb)
tts = resize(genes, 1)
genes.tts = resize(genes, 1)
promoters = promoters(genes.tts, 2000, 200)
y = y$SYMBOL
z = select(org.Hs.eg.db, promoters$gene_id, columns=c("SYMBOL"), keytype="ENTREZID")$SYMBOL
z
table(y == z)
promoters$symbol = select(org.Hs.eg.db, promoters$gene_id, columns=c("SYMBOL"), keytype="ENTREZID")$SYMBOL
promoters
length(genes)
setwd("~/Dropbox/GitHub/ATAC/")
(files = list.files("broadPeak/")) # atac broadPeak (all samples)
peaks = lapply(files, function(x) readBroadPeak(paste0("broadPeak/", x))) %>% GRangesList
(names(peaks) <- c(paste0("Ast", 1:3), paste0("Neu", 1:6)))
atac_promoters <- lapply(peaks, function(x) subsetByOverlaps(promoters, x))
subsetByOverlaps(promoters, peaks)
x = subsetByOverlaps(promoters, peaks)
length(x)
width(atac_promoters[[1]])
open_promoters <- lapply(peaks, function(x) subsetByOverlaps(promoters, x))
open_promoters[[1]]
intersect(open_promoters)
intersect(GRangesList(open_promoters))
which(table(unlist(open_promoters[1:3])$symbol) == 3)
table(unlist(open_promoters[1:3])$symbol
)
unlist(open_promoters)
unlist(open_promoters)
x = unlist(open_promoters)
str(x)
GRangesList(open_promoters)
x = GRangesList(open_promoters)
unlist(x)
open_promoters <- GRangesList(lapply(peaks, function(x) subsetByOverlaps(promoters, x)))
which(table(unlist(open_promoters[1:3])$symbol) == 3)
names(which(table(unlist(open_promoters[1:3])$symbol) == 3))
table(unlist(open_promoters[1:3])$symbol) == 3)
table(unlist(open_promoters[1:3])$symbol) == 3
table(unlist(open_promoters[1:3])$symbol)
x = table(unlist(open_promoters[1:3])$symbol)
txdb = keepStandardChromosomes(TxDb.Hsapiens.UCSC.hg19.knownGene)
txdb.gr = GenomicRangesList(cds = cds(txdb), exons = exons(txdb), genes = genes(txdb), promoters = promoters(txdb))
txdb.gr$introns = unlist(intronsByTranscript(txdb))
txdb.gr$five = unlist(fiveUTRsByTranscript(txdb))
txdb.gr$three = unlist(threeUTRsByTranscript(txdb))
txdb.gr = lapply(txdb.gr, function(x) {strand(x) = "*"; reduce(x)})
txdb.gr$intergenic = gaps((gsdb$genes + 3e3))
txdb.gr$intergenic = gsdb$intergenic[strand(gsdb$intergenic) == "*", ]
txdb.gr$intergenic = gaps((txdb.gr$genes + 3e3))
txdb.gr$intergenic = gsdb$intergenic[strand(txdb.gr$intergenic) == "*", ]
txdb.gr$intergenic = txdb.gr$intergenic[strand(txdb.gr$intergenic) == "*", ]
overlap.bs = sapply(peaks, function(x) sapply(txdb.gr, function(y) sum(width(intersect(x, y)))))
overlap.ct.pk = sapply(peaks, function(x) sapply(txdb.gr, function(y) sum(countOverlaps(x, y) & 1))) # peak number
overlap.ct.gs = sapply(peaks, function(x) sapply(txdb.gr, function(y) sum(countOverlaps(y, x) & 1))) # feature number
(bs2pk = sweep(overlap.bs, 2, sapply(peaks, function(x) sum(width(x))), "/")) # to peak in bp unit
(bs2gs = sweep(overlap.bs, 1, sapply(txdb.gr, function(x) sum(width(x))), "/")) # to gene structure in bp unit
(ct2pk = sweep(overlap.ct.pk, 2, sapply(peaks, length), "/")) # to peak in count unit
(ct2gs = sweep(overlap.ct.gs, 1, sapply(txdb.gr, length), "/")) # to gene structure in count unit
length(txdb.gr$promoters)
overlap_pctg = list(bs2pk = bs2pk, bs2gs = bs2gs, ct2pk = ct2pk, ct2gs = ct2gs)
pdf("pdf/overlap_pctg.pdf", width = 7, height = 4)
lapply(names(overlap_pctg), function(x) {
ggplot(melt(overlap_pctg[[x]]), aes(x = X1, y = value, fill = X1)) + geom_boxplot() +
scale_fill_manual(values = col) + xlab(x) + theme_bw() + theme(legend.position = "none")
}); dev.off()
library(reshape)
pdf("pdf/overlap_pctg.pdf", width = 7, height = 4)
lapply(names(overlap_pctg), function(x) {
ggplot(melt(overlap_pctg[[x]]), aes(x = X1, y = value, fill = X1)) + geom_boxplot() +
scale_fill_manual(values = col) + xlab(x) + theme_bw() + theme(legend.position = "none")
}); dev.off()
col = rep("grey30", 8); col[c(3, 7)] = "firebrick1"
pdf("pdf/overlap_pctg.pdf", width = 7, height = 4)
lapply(names(overlap_pctg), function(x) {
ggplot(melt(overlap_pctg[[x]]), aes(x = X1, y = value, fill = X1)) + geom_boxplot() +
scale_fill_manual(values = col) + xlab(x) + theme_bw() + theme(legend.position = "none")
}); dev.off()
length(promoters)
length(promoters) * 0.4
open_promoters_genes_astrocyte = names(which(table(unlist(open_promoters[1:3])$symbol) == 3))
genesAst = names(which(table(unlist(open_promoters[1:3])$symbol) == 3))
genesNeu = names(which(table(unlist(open_promoters[4:9])$symbol) == 6))
vennList <- list(Neuron = genesNeu, Astrocyte = genesAst)
venn.diagram(vennList, imagetype = "png", file = "pdf/venn2.png", width = 500, height = 500, resolution = 200)
source("../../X/function.R")
genesAst_gk <- hsGK(setdiff(genesAst, genesNrn))
genesAst_gk <- hsGK(setdiff(genesAst, genesNeu))
gk = genesAst_gk
data.frame(KEGG = gk$KEGG$Term[1:20], BP = gk$GO$BP$Term[1:20], MF = gk$GO$BP$Term[1:20])
data.frame(KEGG = gk$KEGG$Term[1:20], BP = gk$GO$BP$Term[1:20], MF = gk$GO$BP$Term[1:20])
genesNeu_gk <- hsGK(setdiff(genesNeu, genesAst)); gk = genesNeu_gk
data.frame(KEGG = gk$KEGG$Term[1:20], BP = gk$GO$BP$Term[1:20], MF = gk$GO$BP$Term[1:20])
neuron_file <- "Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt"
astrocyte_file <- "Astrocytes_vs_neurons.HOMER_sorted_final_header_positive.txt"
Neu_file <- "Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt"
Ast_file <- "Astrocytes_vs_neurons.HOMER_sorted_final_header_positive.txt"
Neu <- read.delim(paste0("diff/", Neu_file), stringsAsFactors = F)
Ast <- read.delim(paste0("diff/", Ast_file), stringsAsFactors = F)
Neu <- dplyr::select(Neu, -one_of("chr", "start", "end", "strand", "width"))
Neu <- makeGRangesFromDataFrame(Neu, keep.extra.columns = T)
Ast <- dplyr::select(Ast, -one_of("chr", "start", "end", "strand", "width"))
Ast <- makeGRangesFromDataFrame(Ast, keep.extra.columns = T)
?makeGRangesFromDataFrame
head(Neu)
peaks_diff = GRangesList(Neu = makeGRangesFromDataFrame(Neu), Ast = makeGRangesFromDataFrame(Ast))
Neu <- read.delim(paste0("diff/", Neu_file), stringsAsFactors = F)
Ast <- read.delim(paste0("diff/", Ast_file), stringsAsFactors = F)
Neu <- dplyr::select(Neu, -one_of("chr", "start", "end", "strand", "width"))
Ast <- dplyr::select(Ast, -one_of("chr", "start", "end", "strand", "width"))
peaks_diff = GRangesList(Neu = makeGRangesFromDataFrame(Neu), Ast = makeGRangesFromDataFrame(Ast))
peaks_diff
promoters
table(duplicated(promoters$symbol))
open_promoters_diff <- GRangesList(lapply(peaks_diff, function(x) subsetByOverlaps(promoters, x)))
open_promoters_diff
length(open_promoters_diff)
lapply(open_promoters_diff, length)
lapply(open_promoters_diff, function(x) unique(x$symbol))
x = lapply(open_promoters_diff, function(x) unique(x$symbol))
lapply(x, length)
vennList = lapply(open_promoters_diff, function(x) x$symbol)
vennList
vennList = lapply(open_promoters_diff, function(x) x$symbol)
venn.diagram(vennList, imagetype = "png", file = "pdf/venn3.png", width = 500, height = 500, resolution = 200)
vennList
names(vennList)
venn.diagram(vennList, imagetype = "png", file = "pdf/venn3.png", width = 500, height = 500, resolution = 200)
na.rm(open_promoters_diff[[2]])
vennList = lapply(open_promoters_diff, function(x) {y = x$symbol; y[! is.na(y)])
vennList = lapply(open_promoters_diff, function(x) {y = x$symbol; y[! is.na(y)]})
vennList
venn.diagram(vennList, imagetype = "png", file = "pdf/venn3.png", width = 500, height = 500, resolution = 200)
open_promoters_gk <- lapply(vennList, hsGK)
myGK = open_promoters_gk
lapply(myGK, function(x) {data.frame(KEGG=x$KEGG$Term[1:20], BP=x$GO$BP$Term[1:20], MF=x$GO$BP$Term[1:20])})
lapply(peaks_diff, length)
lapply(open_promoters_diff, length)
load("../Adsp/data/glmList.rdt") # GWAS
names(glmList)
select <- filter(glmList$gwas, LOD > 15) # permutation cut
gwas_gr <- merge(glmList$vep, select, by.x = "UID", by.y = "UID")
gwas_gr <- makeGRangesFromDataFrame(gwas_gr, start.field = "POS", end.field = "POS", keep.extra.columns = T)
length(gwasGr)
length(gwas_gr)
gwas_gr <- renameSeqlevels(gwas_gr, paste0("chr", seqlevels(gwas_gr)))
(open_gwas <- lapply(peaks, function(idx) subsetByOverlaps(gwas_gr, idx)))
(open_neurons <- lapply(open_gwas[grep("Neu", names(open_gwas))], function(x) unique(x$Symbol)))
(open_neurons <- names(which(table(unlist(open_neurons)) == 6)))
(open_astrocytes <- lapply(open_gwas[grep("Ast", names(open_gwas))], function(x) unique(x$Symbol)))
(open_astrocytes <- names(which(table(unlist(open_astrocytes)) == 3)))
open_astrocytes
open_neurons
open_diff_gwas <- lapply(peaks_diff, function(idx) subsetByOverlaps(gwas_gr, idx))
open_diff_gwas
lapply(open_diff_gwas, function(x) mcols(x)[c("Feature", "Consequence", "Symbol")])
open_diff_gwas_genes = lapply(open_diff_gwas, function(x) mcols(x)[c("Feature", "Consequence", "Symbol")])
lapply(open_diff_gwas_genes, function(x) x$Symbol)
lapply(open_diff_gwas_genes, function(x) unique(x$Symbol))
open_neurons
open_astrocytes
lapply(open_diff_gwas_genes, function(x) unique(x$Symbol))
open_gwas
select
select_gr <- makeGRangesFromDataFrame(select, start.field = "POS", end.field = "POS", keep.extra.columns = T)
select_gr
select_gr <- renameSeqlevels(select_gr, paste0("chr", seqlevels(select_gr)))
open_select <- lapply(peaks, function(idx) subsetByOverlaps(select_gr, idx))
open_select
openVar_astrocyte = names(which(table(unlist(open_select[1:3])$UID) == 3))
openVar_astrocyte
unlist(open_select[1:3])
open_select <- GRangesList(lapply(peaks, function(idx) subsetByOverlaps(select_gr, idx)))
openVar_astrocyte = names(which(table(unlist(open_select[1:3])$UID) == 3))
(openVar_astrocyte = names(which(table(unlist(open_select[1:3])$UID) == 3)))
(openVar_neuron = names(which(table(unlist(open_select[4:9])$UID) == 6)))
glmList$vep
glmList$vep[1:10, ]
(openVar_neuron = names(which(table(unlist(open_select[4:9])$UID) == 6)))
merge(glmList$vep, select[select$UID %in% openVar_astrocyte], by.x = "UID", by.y = "UID")
merge(glmList$vep, select[select$UID %in% openVar_astrocyte, ], by.x = "UID", by.y = "UID")
merge(glmList$vep, select[select$UID %in% openVar_neuron, ], by.x = "UID", by.y = "UID")
open_astrocytes
(open_astrocytes <- lapply(open_gwas[1:3], function(x) unique(x$Symbol)))
(open_astrocytes <- names(which(table(unlist(open_astrocytes)) == 3)))
open_gwas[1:3]
openVar_astrocyte_gwas = merge(glmList$vep, select[select$UID %in% openVar_astrocyte, ], by.x = "UID", by.y = "UID")
openVar_neuron_gwas = merge(glmList$vep, select[select$UID %in% openVar_neuron, ], by.x = "UID", by.y = "UID")
openVar_astrocyte_gwas
openVar_neuron_gwas = merge(glmList$vep, select[select$UID %in% openVar_neuron, ], by.x = "UID", by.y = "UID")
openVar_neuron_gwas
open_diff_gwas <- lapply(peaks_diff, function(idx) subsetByOverlaps(select_gr, idx))
open_diff_gwas_genes = lapply(open_diff_gwas, function(x) mcols(x)[c("Feature", "Consequence", "Symbol")])
open_diff_gwas
openVar_diff = lapply(open_diff_gwas, function(x) x$UID)
openVar_diff
lapply(open_diff_gwas, function(x) merge(glmList$vep, select[select$UID %in% x$UID, ], by.x = "UID", by.y = "UID"))
open_diff_gwas
openVar_diff_gwas = lapply(peaks_diff, function(idx) subsetByOverlaps(select_gr, idx))
openVar_diff = lapply(peaks_diff, function(idx) subsetByOverlaps(select_gr, idx))
openVar_diff_gwas = lapply(openVar_diff, function(x) merge(glmList$vep, select[select$UID %in% x$UID, ], by.x = "UID", by.y = "UID"))
openVar_diff_gwas
lapply(openVar_diff_gwas, function(x) unique(x$Symbol))
load("../Adsp/data/glmList.rdt") # GWAS
select <- filter(glmList$gwas, LOD > 15) # permutation cut
select_gr <- makeGRangesFromDataFrame(select, start.field = "POS", end.field = "POS", keep.extra.columns = T)
select_gr <- renameSeqlevels(select_gr, paste0("chr", seqlevels(select_gr)))
open_select <- GRangesList(lapply(peaks, function(idx) subsetByOverlaps(select_gr, idx)))
(openVar_astrocyte = names(which(table(unlist(open_select[1:3])$UID) == 3)))
(openVar_neuron = names(which(table(unlist(open_select[4:9])$UID) == 6)))
(openVar_Ast = names(which(table(unlist(open_select[1:3])$UID) == 3)))
(openVar_Neu = names(which(table(unlist(open_select[4:9])$UID) == 6)))
openVar_Ast_gwas = merge(glmList$vep, select[select$UID %in% openVar_Ast, ], by.x = "UID", by.y = "UID")
openVar_Neu_gwas = merge(glmList$vep, select[select$UID %in% openVar_Neu, ], by.x = "UID", by.y = "UID")
openVar_Ast_gwas
openVar_Neu_gwas = merge(glmList$vep, select[select$UID %in% openVar_Neu, ], by.x = "UID", by.y = "UID")
openVar_Neu_gwas
4/244
4/244/0.01
4/244/0.019
openAll = sapply(peaks, function(x) sum(width(x))) / sum(as.numeric(seqlengths(txdb)))
Neu_file <- "diff/Astrocytes_vs_neurons.HOMER_sorted_final_header_negative.txt"
Ast_file <- "diff/Astrocytes_vs_neurons.HOMER_sorted_final_header_positive.txt"
peaks_diff = lapply(c(Neu_file, Ast_file), function(file) {
dplyr::select(read.delim(file, stringsAsFactors = F), -one_of("chr", "start", "end", "strand", "width"))
})
head(peaks_diff[[1]])
head(peaks_diff[[2]])
names(peaks_diff)
peaks_diff = lapply(c(Neu_file, Ast_file), function(file) {
dplyr::select(read.delim(file, stringsAsFactors = F), -one_of("chr", "start", "end", "strand", "width"))
}) %>% GRangesList
peaks_diff = lapply(c(Neu_file, Ast_file), function(file) {
x1 = read.delim(file, stringsAsFactors = F)
dplyr::select(x1, -one_of("chr", "start", "end", "strand", "width")) %>% makeGRangesFromDataFrame
}) %>% GRangesList
names(peaks_diff)
peaks_diff[[1]]
peaks_diff[[2]]
names(peaks_diff) = c("Neu", "Ast")
peaks_diff$Ast
open_promoters_diff <- GRangesList(lapply(peaks_diff, function(x) subsetByOverlaps(promoters, x)))
open_promoters_diff_genes = lapply(open_promoters_diff, function(x) {y = x$symbol; y[! is.na(y)]})
venn.diagram(open_promoters_diff_genes, imagetype="png", file="pdf/venn3.png", width=500, height=500, resolution=200)
